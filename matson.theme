<?php

/**
 * @file
 * Preprocess functions for matson.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Component\Utility\HTML;

/**
 * Prepares variables for the html.html.twig template.
 */
function matson_preprocess_html(&$variables) {

}

/**
 * Prepares variables for the field.html.twig template.
 */
function matson_preprocess_field(&$variables, $hook) {

  // Add field specific hook.
  $field_name = $variables['element']['#field_name'];
  $funct = 'matson_preprocess_field_' . $field_name;
  if (function_exists($funct)) {
    $funct($variables, $hook);
  }

  $first_item = isset($variables['element'][0]) ? $variables['element'][0] : NULL;
  $is_paragraph = isset($first_item['#paragraph']) ? $first_item['#paragraph'] : FALSE;
  $has_items = isset($variables['items']) ? count($variables['items']) : FALSE;

  // Add additional information to paragraph fields.
  if ($is_paragraph && $has_items) {
    foreach ($variables['items'] as &$pitem) {
      $paragraph_type = $pitem['content']['#paragraph']->getType();
      $ptype = Html::cleanCssIdentifier("ptype-" . $paragraph_type);
      if (!isset($pitem['attributes']['class'])) {
        $pitem['attributes']['class'] = [];
      }
      $pitem['attributes']['class'][] = "paragraph-item";
      $pitem['attributes']['class'][] = $ptype;
    }
  }

  // Node titles.
  try {
    $node = \Drupal::request()->attributes->get('node');
    if ($node) {
      $variables['node_title'] = $node->getTitle();
    }
  }
  catch (Exception $e) {
    // Do nothing. We don't care.
  }

}

/**
 * Preprocess for field_s_news_date
 *
 * Check to see if the node has been tagged with the earth matters term.
 * If it has set a template variable so that we can use it in the template.
 *
 */
function matson_preprocess_field_field_s_news_date(&$variables, $hook) {
  $node = $variables['element']['#object'];
  $terms = $node->get('field_s_news_category')->getValue();
  // TID 81 == Earth Matters.
  foreach ($terms as $index => $value) {
    if ($value['target_id'] == 81) {
      $variables['is_earth_matters'] = TRUE;
      break;
    }
  }
}

/**
 * Prepares non node/panel pages to be in a single column.
 */
function matson_preprocess_page(&$vars) {
  // Nothing to see here.
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function matson_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node     = \Drupal::routeMatch()->getParameter('node');
  $revision = \Drupal::routeMatch()->getRawParameter('node_revision');

  // Revision IDs are strings and node ids are strings when a revision
  // is loaded.
  // Node parameters loaded by getParameter are objects and the bundle can be
  // accessed normally.
  if ($node) {
    if ($revision) {
      $revised_node = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadRevision($revision);

      $content_type = $revised_node->bundle();
    }
    else {
      $content_type = $node->bundle();
    }

    $suggestions[] = 'page__' . $content_type;
  }

}

/**
 * In some cases, the asset library is not associated with a certain part of the
 * page, because it is associated with the entire page. For this case,
 * hook_page_attachments() exists. A clear example can be found in the
 * Contextual Links module.
 */
function matson_page_attachments_alter(array &$attachments) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_object($node)) {
    $type = $node->getType();
    switch ($type) {
      case 'complex_page':
        $attachments['#attached']['library'][] = 'matson/stanford_complex_page';
        break;

      case 'stanford_subsite':
        $attachments['#attached']['library'][] = 'matson/stanford_subsite';
        break;

      case 'stanford_news':
        $attachments['#attached']['library'][] = 'matson/stanford_news';
        $attachments['#attached']['library'][] = 'matson/sharrre';
        break;

      case 'research_area':
        $attachments['#attached']['library'][] = 'matson/research_area';
        break;

      case 'stanford_event':
        $attachments['#attached']['library'][] = 'matson/stanford_event';
        break;

      case 'stanford_person':
        $attachments['#attached']['library'][] = 'matson/stanford_person';
        break;

      case 'stanford_spotlight':
        $attachments['#attached']['library'][] = 'matson/stanford_spotlight';
        $attachments['#attached']['library'][] = 'matson/sharrre';
        break;

      case 'stanford_view_page':
        $attachments['#attached']['library'][] = 'matson/stanford_view_page';
        break;
    }
  }

  // Attach home page library.
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  if ($is_front) {
    $attachments['#attached']['library'][] = 'matson/home';
  }

}

/*
 * Passes custom variables to blocks, eg. the main menu
 * To print a custom variable (eg. foo) in twig: {{ foo }}
 */
function matson_preprocess_block(&$vars) {

}

/**
 * Block template suggestions.
 * @param  array  $suggestions [description]
 * @param  array  $variables   [description]
 * @return [type]              [description]
 */
// function matson_theme_suggestions_block_alter(array &$suggestions, array $variables) {
//   $block = $variables['elements'];
//   $blockType = $block['#configuration']['provider'];
//   if ($blockType == "block_content") {
//     $bundle = $block['content']['#block_content']->bundle();
//     array_splice($suggestions, 2, 0, 'block__' . $bundle);
//   }
// }
