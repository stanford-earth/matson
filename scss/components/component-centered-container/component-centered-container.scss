@charset 'UTF-8';

// Grab our settings.
@import 'patterns/utilities/utilities';
@import 'decanter/core/utilities/decanter-utilities';

.component-centered-container {
  @include responsive-container($default-container);
}


@mixin responsive-container-margins(
  $container: null
) {
  @each $breakpoint, $_map in $container {
    $_cols: map-get($_map, columns);
    $_grid: map-get($_map, grid-media);
    $_v-space: map-get($_map, v-space);
    $_max-width: map-get($_map, max-width);
    $_grid-collapse: map-get($_map, grid-collapse);

    @include grid-media($_grid) {
      @include centered-container-margins($_cols, $_v-space, $_max-width, $_grid-collapse, $_grid);
    }
  }
}



@mixin centered-container-margins(
  $columns: null,
  $v-space: 1em,
  $max-width: false,
  $grid-collapse: false,
  $grid: $neat-grid
) {
  $columns: _neat-column-default($grid, $columns); // Retrieves max columns from specified grid if empty, or the specified number of columns otherwise
  $_grid-columns: _retrieve-neat-setting($grid, columns); // Retrieves the number of max columns from the specified grid
  $_grid-gutter: _retrieve-neat-setting($grid, gutter); // Retrieves the gutter from the specified grid

  @include grid-container;
  @if $grid-collapse == true {
    @include grid-collapse($grid);
  }

  @if $v-space {
    margin: $v-space _set-container-padding($columns, $grid, $max-width);
  } @else {
    margin-left: _set-container-padding($columns, $grid, $max-width);
    margin-right: _set-container-padding($columns, $grid, $max-width);
  }
}

.component-centered-container-margins {
  @include responsive-container-margins($default-container);
}
